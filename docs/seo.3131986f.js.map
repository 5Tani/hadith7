{"mappings":"AAkBAA,SAASC,iBAAiB,oBAlB1BC,iBACE,IAAIC,uBAmFWC,EAAAC,GAChBC,MAAAC,QAAAH,KAAAA,EAAA,CAEDA,IAEE,IAAAI,QAAiBC,QAAAC,IAAAN,EAAAO,KAAAC,kBAKCP,EAAgBQ,GACnC,IAAAC,EAED,IAAA,IAAAC,KAAAV,EAAA,IAEM,GADNS,QAASE,MAAAD,EAAAF,GACHC,EAAYG,GAAK,OAAAH,EACrB,MAAII,IACJ,OAAAJ,EAZyBK,UAa8BP,EAAAP,UACvDA,EAAGA,GAAae,EACdC,EAAuBV,KAAkBW,GAAEjB,EAAAM,KAAYO,GAAAA,EAAUN,EAAYU,MAE9EC,OAjBwBC,CAAAZ,EAAAP,IAAAoB,MAAAX,GAAAA,EAAAY,kBACsCC,QAAAC,OAAA,OAAQ,GAANpB,EAAMqB,OAAArB,EAAA,GACxEA,EA1FkBsB,CAAQ,YAErBC,EAAKC,EAAW,KAAM,CAAEC,MAAO,eACnC,IAAK,IAAKC,EAAKC,KAAUC,OAAOC,QAAQlC,GAAO,CAC7C,IAAImC,EAAKN,EAAW,KAAM,CAAEC,MAAO,oBAC/BM,EAAY,IAAIC,gBACpBD,EAAUE,IAAI,cAAeP,GAC7B,IAAIQ,EAAQV,EAAW,IAAK,CAAEW,KAAM,eAAeJ,EAAUK,eAC7DF,EAAMG,UAAYV,EAAMW,KACxBR,EAAGS,YAAYL,GACfX,EAAGgB,YAAYT,GAEjBtC,SAASgD,cAAc,gBAAgBD,YAAYhB,MA8CxB,IAAAkB,mBAAEjB,EAAOkB,EAAAC,GAACA,IAAAA,EAAA,IAEvC,IAAAC,EAAApD,SAAAqD,cAAAH,GACA,IAAA,IAAAhB,EAAAC,KAAAC,OAAkCC,QAAAc,GAAAC,EAAAE,aAAApB,EAAAC,GAClC,OAAAiB,QAE0B,yDACxB,+DASF/B,EAAe,CACb,YACA","sources":["code/seo.js"],"sourcesContent":["async function ready() {\r\n  let data = await getJSON('editions');\r\n\r\n  let UL = getElement('ul', { class: 'list-group' })\r\n  for (let [key, value] of Object.entries(data)) {\r\n    let LI = getElement('li', { class: 'list-group-item' })\r\n    let newparams = new URLSearchParams();\r\n    newparams.set('bareedition', key)\r\n    let aElem = getElement('a', { href: `single.html?${newparams.toString()}` })\r\n    aElem.innerText = value.name\r\n    LI.appendChild(aElem)\r\n    UL.appendChild(LI)\r\n  }\r\n  document.querySelector('#mycontainer').appendChild(UL)\r\n}\r\n\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", ready);\nlet htmlHadithContainer = \r\n`    \r\n<div class=\"card text-dark bg-light m-5\">\r\n<div class=\"card-body\">\r\n<div class=\"card-text lead m-1\"></div>\r\n</div>\r\n\r\n<span id=\"footercontainer\">\r\n</span>\r\n\r\n</div>\r\n`\r\n\r\nlet tableContainer = \r\n`\r\n<table class=\"table table-hover  table-striped\">\r\n  <tbody>\r\n\r\n  </tbody>\r\n</table>\r\n`\r\n\r\nfunction capitalize(words){\r\nreturn words.toString().toLowerCase().replace(/(^\\w{1})|(\\s+\\w{1})/g, match => match.toUpperCase()).trim()\r\n}\r\n\r\nlet htmlparser = new DOMParser();\r\n\r\nfunction getElement(elementName, attributesObj) {\r\n  if(!attributesObj)\r\n    attributesObj = {}\r\n  let element = document.createElement(elementName);\r\n  for (let [key, value] of Object.entries(attributesObj)) {\r\n    element.setAttribute(key, value);\r\n  }\r\n  return element\r\n}\r\n\r\nlet apiLinks = [\"https://cdn.jsdelivr.net/gh/fawazahmed0/hadith-api@1/\", \"https://raw.githubusercontent.com/fawazahmed0/hadith-api/1/\"]\r\nlet quranLinks = [\"https://cdn.jsdelivr.net/gh/fawazahmed0/quran-api@1/\", \"https://raw.githubusercontent.com/fawazahmed0/quran-api/1/\"]\r\nlet extensions = [\".min.json\", \".json\"]\r\n\r\n// https://www.shawntabrizi.com/code/programmatically-fetch-multiple-apis-parallel-using-async-await-javascript/\r\n// Get links async i.e in parallel\r\nasync function getJSON(endpoints, links) {\r\n  if (!Array.isArray(endpoints))\r\n    endpoints = [endpoints]\r\n  let result = await Promise.all(\r\n    endpoints.map(endpoint => fetchWithFallback(getURLs(endpoint, links)).then(response => response.json()))\r\n  ).catch(console.error)\r\n  if (result.length == 1)\r\n    return result[0]\r\n  return result\r\n}\r\n\r\n\r\nasync function fetchWithFallback(links, obj) {\r\n  let response;\r\n  for (let link of links) {\r\n    try {\r\n      response = await fetch(link, obj)\r\n      if (response.ok)\r\n        return response\r\n    } catch (e) { }\r\n  }\r\n  return response\r\n}\r\n\r\n// convert endpoint into multiple urls, including fallback urls\r\nfunction getURLs(endpoint, links) {\r\n  links = links || apiLinks\r\n  return extensions.map(ext => links.map(e => e + endpoint + ext)).flat()\r\n}\r\n\r\nfunction getElementFromHTML(htmlString){\r\n  return htmlparser.parseFromString(htmlString, \"text/html\");\r\n}\r\n\r\n// pass hadith object & get card element with all hadith info in it\r\nfunction getHadithCardElem(hadith,dirval,lang,isocodes){\r\n  let lowerLang = lang.toLowerCase()\r\n  let cardElem = getElementFromHTML(htmlHadithContainer).querySelector('.card')\r\n  cardElem.querySelector('.card-text').innerText = hadith.text\r\n  let footerDiv = getElement('div',{class:\"card-footer\"})\r\n  if(hadith.grades.length>0){\r\n    cardElem.querySelector('#footercontainer').appendChild(footerDiv.cloneNode())\r\n  Array.from(cardElem.querySelectorAll('.card-footer')).at(-1).insertAdjacentHTML(\"beforeend\", `<b>Grades:</b><br>`);\r\n  }\r\n  \r\n  for (let grade of hadith.grades) \r\n    cardElem.querySelector('.card-footer').insertAdjacentHTML(\"beforeend\", `<b>${capitalize(grade.grade)}</b> : ${grade.name}<br>`);\r\n    if(hadith.hadithnumber){\r\n      cardElem.querySelector('#footercontainer').appendChild(footerDiv.cloneNode())\r\n    Array.from(cardElem.querySelectorAll('.card-footer')).at(-1).insertAdjacentHTML(\"beforeend\", `<a href=#hadith${hadith.hadithnumber} class=\"link-dark text-decoration-none\" >Hadith Number: ${hadith.hadithnumber}</a><br>`);\r\n    }\r\n    if(hadith.arabicnumber){\r\n      cardElem.querySelector('#footercontainer').appendChild(footerDiv.cloneNode())\r\n    Array.from(cardElem.querySelectorAll('.card-footer')).at(-1).insertAdjacentHTML(\"beforeend\", `<a href=#hadith${hadith.hadithnumber} class=\"link-dark text-decoration-none\" >Arabic Number: ${hadith.arabicnumber}</a><br>`);\r\n    }\r\n\r\n    if(hadith.reference){\r\n      cardElem.querySelector('#footercontainer').appendChild(footerDiv.cloneNode())\r\n    Array.from(cardElem.querySelectorAll('.card-footer')).at(-1).insertAdjacentHTML(\"beforeend\", `<a href=#hadith${hadith.hadithnumber} class=\"link-dark text-decoration-none\" >Reference: ${Object.entries(hadith.reference).flat().map(e=>capitalize(e)).join(' ')}</a><br>`);\r\n    }\r\n    cardElem.setAttribute('id','hadith'+hadith.hadithnumber)\r\n\r\n    cardElem.querySelector('.card-text').setAttribute('dir',dirval)\r\n    cardElem.querySelector('.card-text').setAttribute('lang',isocodes[lowerLang].iso1 ? isocodes[lowerLang].iso1 : isocodes[lowerLang].iso2)\r\n\r\nreturn cardElem\r\n}"],"names":["document","addEventListener","async","data","endpoints","links","Array","isArray","result","Promise","all","map","endpoint","obj","response","link","fetch","ok","e","$ec472072328b6849$var$fetchWithFallback","$ec472072328b6849$var$apiLinks","$ec472072328b6849$var$extensions","ext","flat","$ec472072328b6849$var$getURLs","then","json","console","error","length","$ec472072328b6849$var$getJSON","UL","$ec472072328b6849$var$getElement","class","key","value","Object","entries","LI","newparams","URLSearchParams","set","aElem","href","toString","innerText","name","appendChild","querySelector","DOMParser","elementName","attributesObj","element","createElement","setAttribute"],"version":3,"file":"seo.3131986f.js.map"}